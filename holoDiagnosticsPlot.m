function holoDiagnosticsPlot(fn, fn_reference)
    % holoDiagnosticsPlot Plot a series of diagnostics figures using data
    %   generated by the holoDiagnostics.m routine.
    %
    %   Examples:
    %   fnout = holoDiagnostics('path/to/images')
    %   holoDiagnosticsPlot(fnout)
    %       Generate a series of plots from the .mat file created by
    %       a holoDiagnostics.m routine.
    %
    %   holoDiagnosticsPlot('fn_diagnostics.mat', 'ref_diagnostics.mat')
    %       Use another diagnostic file as a reference to detect changes
    %       in the background and overall brightness.
    %
    %   See also holoDiagnostics.m, holoDiagnostics_spicule.m.


    close all  %Close previous figures

    %Load reference file containing original background, if given
    if nargin == 2
        load(fn_reference);
        ref = data;
        load(fn);
    else
        %Just copy the main file to 'ref' if no reference
        load(fn);
        ref = data;
    end
    
    %% Main plots if imagedata are available
    if isfield(data, 'imagetime')

        %Find missed frames
        dtime = seconds(data.imagetime(2:end)-data.imagetime(1:end-1));
        outages = find(dtime > 0.33);   %Find gaps larger than the usual 3Hz
        nmissed = sum(dtime(outages))/0.3;
        outagestart = data.imagetime(outages);
        outagestop = data.imagetime(outages+1);
        disp("Number of outages: " + length(outages));
        disp("Missed frames: " + nmissed);

        %Display number bright/dark frames to command line
        nbright = length(find(data.brightness > mean(data.brightness*1.3)));
        ndark = length(find(data.brightness < mean(data.brightness/1.3)));
        ntotal = length(data.brightness);
        disp("Bright frames: " + nbright + "/" + ntotal);
        disp("Dark frames: " + ndark + "/" + ntotal);

        %% Plot background differences (if available)
        %-------------------------------------------
        if nargin == 2
            diff = data.meanbackground - ref.meanbackground;
            figure('Name','Background Difference')
            colormap gray
            imagesc(diff);
            title(data.date+" - "+ref.date+"  Difference");
            saveas(gcf, data.date+"_backgrounddiff.png");
        end
        figure('Name','Mean Background')
        colormap gray
        imagesc(data.meanbackground);
        title([data.prefix ' ' data.date ' Background']);
        saveas(gcf, data.date+"_background.png");


        %% Plot overall brightness histogram
        %----------------------------------
        figure('Name','Brightness Histogram')
        colormap default
        good = find(data.fullsizebrightness > 50);
        plot(data.histogram_edges(1:end-1), mean(data.imagehist(good,:),1), 'DisplayName', 'Flight');
        title([data.prefix ' ' data.date]);
        xlabel('Brightness')
        ylabel('Histogram (mean counts)')
        xlim([5 250])
        grid on
        if nargin == 2
            %Overplot reference
            hold on
            good =  find(ref.fullsizebrightness > 50);
            plot(ref.histogram_edges(1:end-1), mean(ref.imagehist(good,:),1), 'r--', 'DisplayName', 'Reference');
            hold off
        end
        legend
        saveas(gcf, data.date+"_histogram.png");


        %% Plot color-contoured histograms
        %--------------------------------
        if size(data.imagehist, 1) > 10  %Make sure enough histograms for plot
            %Image histogram contours
            figure('Name','Brightness Histogram Time Series')
            levels = linspace(0, max(data.imagehist(:,100)), 15);
            %Have to use datenum for contour routine, annoying.
            contourf(datenum(data.fullimagetime), data.histogram_edges(5:end-5), data.imagehist(:,5:end-4)', levels, 'LineStyle', 'none');
            datetick('x','HH:MM')
            %xlim(timerange)
            xlabel('Time (s)')
            ylabel('Brightness');
            c=colorbar;
            c.Label.String = 'Counts';
            hold on
            plot(datenum(data.fullimagetime), data.fullsizebrightness, 'r', 'Linewidth', 2);
            hold off
            title([data.prefix ' ' data.date]);
            saveas(gcf, data.date+"_histogramcontour.png");
        end


        %% Brightness time series plot (center patch and full image), with aircraft data
        %------------------------------------------------------------------
        figure('Name', 'Brightness Time Series')
        tiledlayout(4,1)

        ax1 = nexttile([2 1]);
        plot(data.imagetime, data.brightness, '.')
        ylim([0 250])
        grid on
        hold on
        plot(data.fullimagetime, data.fullsizebrightness, 'r+', 'Linewidth', 2);
        
        %Highlight gaps in data
        for i=1:length(outages)
            ff=fill([outagestart(i) outagestart(i) outagestop(i) outagestop(i)], [0 255 255 0], 'k', 'LineStyle','none');
            hold off
            alpha(ff, 0.3);
            hold on
        end
        hold off
        
        title([data.prefix ' ' data.date]);
        xlabel('Time (s)')
        ylabel('Brightness')

        if isfield(data, 'ncfile')  %Skip if no netCDF data
            %Used this originally for issues in updrafts in SPICULE.
            %ax2 = nexttile;
            %plot(data.aircraft.time, data.aircraft.w)
            %ylim([-10 10])
            %xlabel('Time (s)')
            %ylabel('W (m/s)')

            ax2 = nexttile;
            plot(data.aircraft.time, data.aircraft.t)
            xlabel('Time (s)')
            ylabel('T (degC)')

            if isfield(data.aircraft, 'cdplwc')
                ax3 = nexttile;
                plot(data.aircraft.time, data.aircraft.cdplwc)
                xlabel('Time (s)')
                ylabel('CDP LWC (g/m3)')
                %Some projects have two CDPs
                if isfield(data.aircraft, 'cdplwc2')
                    hold on
                    plot(data.aircraft.time, data.aircraft.cdplwc2);
                    hold off
                end
                linkaxes([ax1, ax2, ax3],'x');
            else
                linkaxes([ax1, ax2],'x');
            end
        elseif isfield(data, 'hk')  %Skip if no housekeeping data
            ax2 = nexttile([2,1]);
            plot(data.hk.time, data.hk.tobserved);
            grid on
            legend(data.hk.tlabels);
            xlabel('Time (s)'); ylabel('Temperature [\circC]')
            linkaxes([ax1, ax2],'x');
        end
        saveas(gcf, data.date+"_brightness.png");

        %% Image rate plot
        figure('Name', 'Hologram Imaging Rate')
        dtime = data.imagetime(2:end)-data.imagetime(1:end-1);
        plot(data.imagetime(1:end-1), seconds(dtime), '.');
        xlabel('Time')
        ylabel('Time Difference (s)')
        ylim([0, 2])
        grid on
        saveas(gcf, data.date+"_hologramrate.png");

    end %main plots, supplementary plots below
    
    %% Flight data plot if available
    if isfield(data, 'ncfile')  %Skip if no netCDF data
        figure('Name','Flight Data')
        tiledlayout(2,1)

        ax1 = nexttile;
        plot(data.aircraft.time, data.aircraft.w)
        title([data.flightnumber ' ' data.date]);
        xlabel('Time (s)')
        ylabel('W (m/s)')

        ax2 = nexttile;
        plot(data.aircraft.time, data.aircraft.t)
        xlabel('Time (s)')
        ylabel('T (degC)')

        linkaxes([ax1,ax2],'x');
    end
    
    %% Housekeeping plots if available 
    if isfield(data, 'hk')
        %Laser Status plot
        figure('Name','Laser')
        tiledlayout(3,1)
        ax1 = nexttile;
        plot(data.hk.time, data.hk.LaserStatus,'.', data.hk.time, -1*data.hk.LaserError,'r.')
        title('Laser Status (i.e. Input)'); xlabel('Time (s)'); ylim([-1.5,7.5])
        set(gca,'ytick',-1:7,'yticklabel',{'Laser Error','Laser Off','-','Warm Up','Ready','-','-','-','Lasing'},...
            'XGrid','on','YGrid','on')

        ax2 = nexttile;
        plot(data.hk.time, data.hk.PowerOutput,'.')
        title('Power (i.e. Output)'); xlabel('Time (s)'); ylim([-0.5,3.5])
        set(gca,'ytick',0:3,'yticklabel',{'Both On','Laser On','Camera On','All Off'},'XGrid','on','YGrid','on')

        ax3 = nexttile;
        plot(data.hk.time, data.hk.Interlocks,'.','Color',[0,0.4470,0.7410])
        title('Interlocks Satisfied (i.e Relay)'); xlabel('Time (s)'); ylim([-0.5,5.5])
        set(gca,'ytick',0:7,'yticklabel',{'Laser Tip','Camera Tip','Camera','Laser Head','Laser Cont.','Laser'},...
            'XGrid','on','YGrid','on')
        linkaxes([ax1, ax2, ax3],'x');
        zoom xon
        saveas(gcf, data.date+"_laserstatus.png");

        %Temperature plot
        figure('Name','Temperature')
        tiledlayout(5,1)
        ax1 = nexttile([2 1]);
        plot(data.hk.time, data.hk.tsetpoints)
        title('Set Point'); xlabel('Time (s)'); ylabel('Temperature [\circC]')
        grid on
        grid minor
        legend(data.hk.tlabels)

        ax2 = nexttile([2 1]);
        plot(data.hk.time, data.hk.tobserved)
        title('Temperature'); xlabel('Time (s)'); ylabel('Temperature [\circC]')
        grid on
        grid minor
        linkaxes([ax1, ax2], 'x');
        if isfield(data, 'ncfile')  %Skip if no netCDF data
            ax3 = nexttile;
            plot(data.aircraft.time, data.aircraft.t, 'k')
            title('Ambient'); xlabel('Time (s)'); ylabel('T [\circC]')
            grid on
            grid minor
            linkaxes([ax1, ax2, ax3],'x');
        end
        
        saveas(gcf, data.date+"_probetemperature.png");
    end

end
